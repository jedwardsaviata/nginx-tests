proxy_set_header Upgrade $http_upgrade;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

# Mitigate httpoxy attack
proxy_set_header Proxy ""; 

# Why aren't these supported on the official Nginx Docker image?
#proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
#proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
#proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

# the default service
upstream rest-service {
  server rest:8080;
}

# the redirect service
upstream secure-service {
  server secure:8080;
}

# server definition
server {
  listen 8080;
  listen [::]:8080; 
  server_name inner;

  set $force_https {{FORCE_HTTPS}};

  # Initialize the HTTPS enforcement state.
  set $enforce_state "";

  # Is HTTPS enforcement enabled?
  if ($force_https = true) { set $enforce_state "force"; }

  # Is the scheme forwarded by a proxy?
  set $forward_scheme "fwd-none";
  if ($http_x_forwarded_proto = "http") { set $forward_scheme "fwd-http"; }
  if ($http_x_forwarded_proto = "https") { set $forward_scheme "fwd-https"; }
  set $enforce_state "$enforce_state:$forward_scheme";

  # What is the request's scheme?
  set $raw_scheme "raw-https";
  if ($scheme = "http") { set $raw_scheme "raw-http"; }
  set $enforce_state "$enforce_state:$raw_scheme";

  # Determine if we have a pattern which matches a HTTPS redirect requirement.
  set $do_https_redirect "false";
  if ($enforce_state ~ "force:fwd-http:.*") { set $do_https_redirect "true"; }
  if ($enforce_state = "force:fwd-none:raw-http") { set $do_https_redirect "true"; }

  set $forwarding_host $host;
  if ($http_x_forwarded_host) {
    set $forwarding_host $http_x_forwarded_host;
  }

  # Redirect if required.
  #if ($do_https_redirect = "true") {
  #  #return 302 http://$forwarding_host$request_uri;
  #  set $alternate_host rest:8080;
  #  return 302 http://$host/secure$request_uri;
  #}

#  location /secure {
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header Host $host;
#
#    # WebSocket support
#    #proxy_set_header Upgrade $http_upgrade;
#    #proxy_set_header Connection $connection_upgrade;
#    
#    # Customize connection timeouts
#    #proxy_read_timeout 900s;
#    #proxy_send_timeout 900s;
#
#    proxy_http_version 1.1;
#    expires off;
#
#    proxy_pass http://secure-service/;
#  }

  # Reverse proxy to the REST API
  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Debug-Force-Https $force_https;
    proxy_set_header X-Debug-Enforce-State $enforce_state;
    proxy_set_header X-Debug-Do-Https-Redirect $do_https_redirect;
    proxy_set_header X-Debug-Forward-Scheme $forward_scheme;
    proxy_set_header X-Debug-Forwarding-Host $forwarding_host;
    proxy_set_header X-Debug-Raw-Scheme $raw_scheme;
    proxy_set_header X-Debug-Scheme $scheme;
    proxy_set_header X-Debug-Host $host;
    proxy_set_header X-Debug-Request-Uri $request_uri;
    proxy_set_header Host $host;

    # WebSocket support
    #proxy_set_header Upgrade $http_upgrade;
    #proxy_set_header Connection $connection_upgrade;
    
    # Customize connection timeouts
    #proxy_read_timeout 900s;
    #proxy_send_timeout 900s;

    proxy_http_version 1.1;
    expires off;

    proxy_pass http://rest-service/;
  }
}
